#!/usr/bin/env python2
#
# The MIT License (MIT)
#
# Copyright 2013 - 2017 Red Hat, Inc.
#
# Author: Fam Zheng <famz@redhat.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import subprocess
import tempfile
import os, sys
import random
import email
import argparse

DEBUG = 0

if 'DEBUG' in os.environ and os.environ['DEBUG']:
    DEBUG = 1

def cmd(cmd):
    if DEBUG:
        print cmd
    return 0 == subprocess.call(cmd, shell=True)

def indent(lines, spaces):
    return '\n'.join([" " * spaces + s for s in lines.split('\n')])

def git(cmd):
    ret = ""
    if DEBUG:
        print "git " + cmd
    try:
        ret = subprocess.check_output("git " + cmd, shell=True)
    except:
        pass
    while ret[-1:] == "\n":
        ret = ret[:-1]
    if DEBUG:
        print ret
    return ret

def git_commits(cur, base):
    return filter(len, git("log --reverse --pretty=%%H %s..%s" % (base, cur)).split('\n'))

def git_get_cherry_pick(c):
    for l in git("show --pretty=email %s" % c).splitlines():
        if l.startswith("(cherry picked from commit"):
            return l[len("(cherry picked from commit "):-1]

def git_subject(c):
    return git("log -n 1 --pretty=%s " + c)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--version", help="version number", type=int)
    parser.add_argument("-b", "--base", required=True, help="base branch")
    parser.add_argument("-u", "--upstream", required=True, help="upstream branch")
    args = parser.parse_args()
    return args

def main():
    global args
    args = parse_args()

    base = args.base

    commits = git_commits("HEAD", base)
    up_commits = []
    cp = {}
    for c in commits:
        cm = git_get_cherry_pick(c)
        up_commits.append(cm)
        cp[cm] = c

    up_commits_ordered = git("log " + args.upstream + " --format=%H | grep " + " ".join(["-e %s" % x for x in up_commits])).splitlines()
    up_commits_ordered.reverse()
    if up_commits_ordered == up_commits:
        print "Order match"
    else:
        print "Upstream order is different from backport order, suggest rebase as"
        print
        print up_commits_ordered
        print commits
        for u in up_commits_ordered:
            assert git_subject(u) == git_subject(cp[u])
            print "pick", cp[u][:10], git_subject(u)

    return True

if __name__ == '__main__':
    if main():
        sys.exit(0)
    else:
        sys.exit(1)
